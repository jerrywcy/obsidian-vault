/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const wrapAround = (value, size) => {
    return ((value % size) + size) % size;
};
class Suggest {
    constructor(owner, containerEl, scope) {
        this.owner = owner;
        this.containerEl = containerEl;
        containerEl.on("click", ".suggestion-item", this.onSuggestionClick.bind(this));
        containerEl.on("mousemove", ".suggestion-item", this.onSuggestionMouseover.bind(this));
        scope.register([], "ArrowUp", (event) => {
            if (!event.isComposing) {
                this.setSelectedItem(this.selectedItem - 1, true);
                return false;
            }
        });
        scope.register([], "ArrowDown", (event) => {
            if (!event.isComposing) {
                this.setSelectedItem(this.selectedItem + 1, true);
                return false;
            }
        });
        const selectItem = (event) => {
            if (!event.isComposing) {
                this.useSelectedItem(event);
                return false;
            }
        };
        scope.register([], "Enter", selectItem);
        scope.register(["Shift"], "Enter", selectItem);
    }
    onSuggestionClick(event, el) {
        event.preventDefault();
        const item = this.suggestions.indexOf(el);
        this.setSelectedItem(item, false);
        this.useSelectedItem(event);
    }
    onSuggestionMouseover(_event, el) {
        const item = this.suggestions.indexOf(el);
        this.setSelectedItem(item, false);
    }
    setSuggestions(values) {
        this.containerEl.empty();
        const suggestionEls = [];
        values.forEach((value) => {
            const suggestionEl = this.containerEl.createDiv("suggestion-item");
            this.owner.renderSuggestion(value, suggestionEl);
            suggestionEls.push(suggestionEl);
        });
        this.values = values;
        this.suggestions = suggestionEls;
        this.setSelectedItem(0, false);
    }
    useSelectedItem(event) {
        const currentValue = this.values[this.selectedItem];
        if (currentValue) {
            this.owner.selectSuggestion(currentValue, event);
        }
        else if (event.shiftKey) {
            this.owner.selectSuggestion(currentValue, event);
        }
    }
    setSelectedItem(selectedIndex, scrollIntoView) {
        const normalizedIndex = wrapAround(selectedIndex, this.suggestions.length);
        const prevSelectedSuggestion = this.suggestions[this.selectedItem];
        const selectedSuggestion = this.suggestions[normalizedIndex];
        prevSelectedSuggestion === null || prevSelectedSuggestion === void 0 ? void 0 : prevSelectedSuggestion.removeClass("is-selected");
        selectedSuggestion === null || selectedSuggestion === void 0 ? void 0 : selectedSuggestion.addClass("is-selected");
        this.selectedItem = normalizedIndex;
        if (scrollIntoView) {
            selectedSuggestion.scrollIntoView(false);
        }
    }
}

function checkForInputPhrase(cmEditor, pos, phrase) {
    const from = {
        line: pos.line,
        ch: pos.ch - phrase.length,
    };
    if (cmEditor.getRange(from, pos) !== phrase) {
        return false;
    }
    const precedingChar = cmEditor.getRange({
        line: pos.line,
        ch: from.ch - 1,
    }, from);
    return !precedingChar || /[^`a-zA-Z0-9]/.test(precedingChar);
}
function isCursorBeforePos(pos, cursor) {
    if (pos.line === cursor.line) {
        return cursor.ch < pos.ch;
    }
    return cursor.line < pos.line;
}
class CodeMirrorSuggest {
    constructor(app, triggerPhrase) {
        this.triggerPhrase = triggerPhrase;
        this.app = app;
        this.scope = new obsidian.Scope();
        this.suggestEl = createDiv({ cls: ["suggestion-container", "netwik-suggestion"] });
        const suggestion = this.suggestEl.createDiv("suggestion");
        this.instructionsEl = this.suggestEl.createDiv("prompt-instructions");
        this.suggest = new Suggest(this, suggestion, this.scope);
        this.scope.register([], "Escape", this.close.bind(this));
    }
    setInstructions(createInstructionsFn) {
        this.instructionsEl.empty();
        createInstructionsFn(this.instructionsEl);
    }
    update(cmEditor, changeObj) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (this.cmEditor !== cmEditor) {
                (_a = this.suggestEl) === null || _a === void 0 ? void 0 : _a.detach();
            }
            this.cmEditor = cmEditor;
            const cursorPos = cmEditor.getCursor();
            // autosuggest is open
            if (this.suggestEl.parentNode) {
                if (isCursorBeforePos(this.startPos, cursorPos)) {
                    this.close();
                    return false;
                }
                yield this.attachAtCursor();
            }
            else {
                if (changeObj.text.length === 1 && // ignore multi-cursors
                    checkForInputPhrase(this.cmEditor, cursorPos, this.triggerPhrase) &&
                    !document.querySelector(".suggestion-container") // don't trigger multiple autosuggests
                ) {
                    this.startPos = cursorPos;
                    this.open();
                    yield this.attachAtCursor();
                }
            }
            return false;
        });
    }
    getStartPos() {
        return {
            line: this.startPos.line,
            ch: this.startPos.ch - this.triggerPhrase.length,
        };
    }
    getInputStr() {
        // return string from / to cursor
        const cursor = this.cmEditor.getCursor();
        const line = this.cmEditor.getLine(cursor.line);
        return line.substring(this.startPos.ch, cursor.ch);
    }
    attachAtCursor() {
        return __awaiter(this, void 0, void 0, function* () {
            const inputStr = this.getInputStr();
            const suggestions = yield this.getSuggestions(inputStr);
            if (this.startPos) {
                this.suggest.setSuggestions(suggestions);
                this.cmEditor.addWidget(this.cmEditor.getCursor(), this.suggestEl, true);
            }
        });
    }
    open() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.app.keymap.pushScope(this.scope);
    }
    close() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.app.keymap.popScope(this.scope);
        this.startPos = null;
        this.suggest.setSuggestions([]);
        this.suggestEl.detach();
    }
    getSuggestions(inputStr) {
        return __awaiter(this, void 0, void 0, function* () { return []; });
    }
    ;
}

class BlockSuggest extends CodeMirrorSuggest {
    constructor(ctx) {
        super(ctx.app, ctx.settings.triggerPhrase);
        this.ctx = ctx;
        this.updateInstructions();
    }
    open() {
        super.open();
        // update the instructions since they are settings-dependent
        this.updateInstructions();
    }
    updateInstructions() {
        this.setInstructions((containerEl) => {
            containerEl.createDiv("prompt-instructions", (instructions) => {
                instructions.createDiv({ cls: "prompt-instruction" }, (instruction) => {
                    instruction.createSpan({
                        cls: "prompt-instruction-command",
                        text: "Shift",
                    });
                    instruction.createSpan({
                        text: "and Enter to create note",
                    });
                });
            });
        });
    }
    getSuggestions(inputStr) {
        return __awaiter(this, void 0, void 0, function* () {
            const suggestions = yield this.ctx.api.getSuggestions(inputStr);
            return [
                // {
                //     title: inputStr,
                //     _id: '_create'
                // },
                ...suggestions
            ];
        });
    }
    renderSuggestion(suggestion, el) {
        el.setText(suggestion.title);
    }
    insertLink(path) {
        const head = this.getStartPos();
        const anchor = this.cmEditor.getCursor();
        let insertingValue = `[[${path}]]`;
        this.cmEditor.replaceRange(insertingValue, head, anchor);
        this.close();
    }
    pathFromBlock(block) {
        const name = this.ctx.base.mdBase.nameFromBlock(block);
        return this.ctx.base.mdBase.pathByName(name).match('(.+)\.md')[1];
    }
    selectSuggestion(suggestion, event) {
        if (suggestion) {
            this.ctx.base.downloadFile(suggestion._id);
            this.insertLink(this.pathFromBlock(suggestion));
        }
        else {
            // Press Shift + Enter
            const title = (suggestion === null || suggestion === void 0 ? void 0 : suggestion.title) || this.getInputStr();
            this.ctx.base.createFile({ title: title }).then(block => {
                this.insertLink(this.pathFromBlock(block));
            });
        }
    }
}

class Context {
}

var HTTP_CODE;
(function (HTTP_CODE) {
    HTTP_CODE[HTTP_CODE["GONE"] = 410] = "GONE";
})(HTTP_CODE || (HTTP_CODE = {}));
class APIError extends Error {
    constructor(code) {
        super(`API Error: ${code}`);
        this.code = code;
    }
}
class API {
    constructor(baseURL) {
        this.getSuggestions = ((query) => __awaiter(this, void 0, void 0, function* () {
            try {
                const url = `${this.baseURL}/suggestions/?query=${query}`;
                const response = yield fetch(url);
                const json = yield response.json();
                return json.suggestions;
            }
            catch (_a) {
                return [];
            }
        }));
        this.uploadBlock = (block) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseURL}/block/`;
            const response = yield fetch(url, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(block)
            });
            return yield API.getResponseJson(response);
        });
        this.createBlock = (block) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseURL}/block/`;
            const response = yield fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(block)
            });
            return yield API.getResponseJson(response);
        });
        this.downloadBlock = (_id) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseURL}/block/?_id=${_id}`;
            const response = yield fetch(url);
            return yield API.getResponseJson(response);
        });
        this.deleteBlock = (_id) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseURL}/block/?_id=${_id}`;
            yield fetch(url, {
                method: 'DELETE'
            });
        });
        this.getBlocks = (ids) => __awaiter(this, void 0, void 0, function* () {
            return API.getResponseJson(yield fetch(`${this.baseURL}/blocks/?ids=${ids.join(',')}`));
        });
        this.baseURL = baseURL;
    }
    static getResponseJson(response) {
        return __awaiter(this, void 0, void 0, function* () {
            if (response.status > 299) {
                throw new APIError(HTTP_CODE.GONE);
            }
            return response.json();
        });
    }
}

class ModulesRenderer {
    constructor(block) {
        this.block = block;
    }
    genMeta(aliases) {
        if (!aliases.length) {
            return '';
        }
        return `---\naliases: [${aliases.join(', ')}]\n---\n`;
    }
    link(value, options) {
        return `[[${value}]]`;
    }
}
class ModulesParser {
    constructor(text, block) {
        this.extractMatch = (pattern) => {
            const match = this.text.match(pattern);
            if (!match) {
                return undefined;
            }
            return match[1];
        };
        this.text = text;
        this.block = block;
    }
    textCopy() {
        return `${this.text}`;
    }
    title() {
        return this.extractMatch(ModulesParser.regex.title);
    }
    desc() {
        return this.extractMatch(ModulesParser.regex.desc);
    }
    body() {
        let text = this.textCopy();
        text = text.replace(/# .+\n/, '');
        return text;
    }
}
ModulesParser.regex = {
    title: /# (.+)/,
    desc: /# *.+\n(.+)*/
};
class MarkdownAdapter {
    constructor() {
    }
    toMarkdown(block) {
        var _a;
        let text = '';
        const renderer = new ModulesRenderer(block);
        if ((_a = block.create) === null || _a === void 0 ? void 0 : _a.filename) {
            text += renderer.genMeta([block.create.filename].filter(alias => block.title !== alias));
        }
        if (block.title) {
            text += `# ${block.title}\n`;
        }
        if (block.desc) {
            text += block.desc + '\n';
        }
        if (block.body) {
            text += block.body;
        }
        return text;
    }
    toBlock(text, localBlock) {
        const block = {};
        const parser = new ModulesParser(text, block);
        for (const module of MarkdownAdapter.modules) {
            // @ts-ignore
            if (parser[module] !== undefined) {
                // @ts-ignore
                const moduleValue = parser[module]();
                if (moduleValue) {
                    // @ts-ignore
                    block[module] = moduleValue;
                }
            }
        }
        return block;
    }
}
MarkdownAdapter.modules = [
    'title', 'body', 'create'
];

class LocalMdBase {
    constructor(ctx) {
        this.ctx = ctx;
        this.basePath = 'w';
    }
    checkBaseFolder() {
        return __awaiter(this, void 0, void 0, function* () {
            // If root folder does not exist, creates it.
            const stat = this.ctx.app.vault.adapter.stat(obsidian.normalizePath(this.basePath));
            if (!stat) {
                yield this.ctx.app.vault.createFolder(this.basePath);
                new obsidian.Notice('Netwik storage created!');
            }
        });
    }
    idByName(name) {
        let match = name.match(/(\w+)\W/);
        if (!match) {
            match = name.match(/^(\w+)$/);
            return match && match[1];
        }
        return match[1];
    }
    nameByPath(path) {
        const match = path.match(/\/([^/]+)\.\w+/);
        if (!match) {
            return undefined;
        }
        return match[1];
    }
    nameFromBlock(block) {
        return `${block._id} ${block.title}`;
    }
    idByPath(path) {
        const name = this.nameByPath(path);
        return name && this.idByName(name);
    }
    pathByName(name) {
        return `${this.basePath}/${name}.md`;
    }
    pathById(_id) {
        return this.pathsById(_id)[0];
    }
    pathsById(_id) {
        return this.ctx.app.vault.getMarkdownFiles()
            .filter(file => this.isControlledPath(file.path) && this.idByPath(file.path) === _id)
            .map(file => file.path);
    }
    getNamesList() {
        return __awaiter(this, void 0, void 0, function* () {
            const files = yield this.ctx.app.vault.adapter.list(obsidian.normalizePath(this.basePath));
            const mdFiles = files.files.filter(path => path.contains('.md'));
            return mdFiles.map(path => this.nameByPath(path));
        });
    }
    readCurrent(file) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.ctx.app.vault.cachedRead(file);
        });
    }
    write(name, text) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ctx.app.vault.adapter.write(obsidian.normalizePath(this.pathByName(name)), text);
        });
    }
    read(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.ctx.app.vault.adapter.read(obsidian.normalizePath(this.pathByName(name)));
        });
    }
    delete(path) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ctx.app.vault.delete(this.ctx.app.vault.getAbstractFileByPath(path));
        });
    }
    isControlledPath(path) {
        const pathPrefix = this.basePath + '/';
        return path.includes(pathPrefix) && path.includes('.md');
    }
}

class LocalJsonBase {
    constructor(ctx) {
        this.ctx = ctx;
        this.basePath = 'w/.blocks';
    }
    checkBaseFolder() {
        return __awaiter(this, void 0, void 0, function* () {
            const stat = yield this.ctx.app.vault.adapter.stat(obsidian.normalizePath(this.basePath));
            if (!stat) {
                yield this.ctx.app.vault.createFolder(this.basePath);
            }
        });
    }
    getIdsList() {
        return __awaiter(this, void 0, void 0, function* () {
            const files = yield this.ctx.app.vault.adapter.list(obsidian.normalizePath(this.basePath));
            return files.files.map(path => this.idByPath(path)).filter(x => !!x);
        });
    }
    pathById(_id) {
        return `${this.basePath}/${_id}.json`;
    }
    idByPath(path) {
        const match = path.match(/\/([^/]+)\.\w+/);
        return match && match[1];
    }
    write(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const filePath = this.pathById(data._id);
            const dataString = JSON.stringify(data);
            const stat = yield this.ctx.app.vault.adapter.stat(obsidian.normalizePath(filePath));
            if (!stat) {
                yield this.ctx.app.vault.create(filePath, dataString);
            }
            else {
                yield this.ctx.app.vault.adapter.write(obsidian.normalizePath(filePath), dataString);
            }
        });
    }
    read(_id) {
        return __awaiter(this, void 0, void 0, function* () {
            const filePath = this.pathById(_id);
            const stat = yield this.ctx.app.vault.adapter.stat(obsidian.normalizePath(filePath));
            if (!stat) {
                return null;
            }
            else {
                return JSON.parse(yield this.ctx.app.vault.adapter.read(obsidian.normalizePath(filePath)));
            }
        });
    }
    delete(_id) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = this.pathById(_id);
            yield this.ctx.app.vault.adapter.remove(obsidian.normalizePath(path));
        });
    }
}

const capitalize = (s) => {
    return s[0].toUpperCase() + s.slice(1);
};

class Base {
    constructor(ctx) {
        this.fileModifyHandle = (file) => {
            var _a;
            if (file && this.mdBase.isControlledPath(file.path) && file.path === ((_a = this.ctx.app.workspace.getActiveFile()) === null || _a === void 0 ? void 0 : _a.path)
                && !this.ignoreModifyState) {
                this.saveCurrentFile();
            }
        };
        this.fileCreateHandle = (file) => {
            if (file && this.mdBase.isControlledPath(file.path) && !this.ignoreModifyState) {
                this.indexLocalFile(file.path);
            }
        };
        this.fileRenameHandle = (file, oldPath) => {
            if (file && this.mdBase.isControlledPath(file.path) && !this.ignoreModifyState
                && !this.mdBase.isControlledPath(oldPath)) {
                this.indexLocalFile(file.path);
            }
        };
        this.fileDeleteHandle = (file) => {
            if (file && this.mdBase.isControlledPath(file.path) && !this.ignoreModifyState) {
                this.jsonBase.delete(this.mdBase.idByName(file.basename));
            }
        };
        this.fileOpenHandle = (file) => {
            if (file && this.mdBase.isControlledPath(file.path) && !this.ignoreModifyState) {
                this.updateMd(this.mdBase.idByName(file.basename));
            }
        };
        this.ctx = ctx;
        this.mdBase = new LocalMdBase(ctx);
        this.jsonBase = new LocalJsonBase(ctx);
        this.ignoreModifyState = false;
        this.syncBase();
        this.checkFileStructure();
        ctx.app.vault.on('modify', this.fileModifyHandle);
        ctx.app.vault.on('create', this.fileCreateHandle);
        ctx.app.vault.on('delete', this.fileDeleteHandle);
        ctx.app.vault.on('rename', this.fileRenameHandle);
        this.ctx.app.workspace.on('file-open', this.fileOpenHandle);
    }
    onunload() {
        this.ctx.app.vault.off('modify', this.fileModifyHandle);
        this.ctx.app.vault.off('create', this.fileCreateHandle);
        this.ctx.app.vault.off('rename', this.fileRenameHandle);
        this.ctx.app.vault.off('delete', this.fileDeleteHandle);
    }
    updateMd(_id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.mdBase.pathsById(_id).length == 1) {
                const block = yield this.jsonBase.read(_id);
                if (!block) {
                    return;
                }
                const text = this.ctx.mdAdapter.toMarkdown(block);
                if (!this.ignoreModifyState) {
                    yield this.mdBase.write(this.mdBase.nameByPath(this.mdBase.pathById(_id)), text);
                }
            }
        });
    }
    createBlockFromFile(name) {
        return __awaiter(this, void 0, void 0, function* () {
            let block = this.blockByName(name);
            const text = yield this.mdBase.read(name);
            block = Object.assign(Object.assign({}, block), this.ctx.mdAdapter.toBlock(text, {}));
            yield this.createFile(block, this.mdBase.pathByName(name));
        });
    }
    syncBase() {
        return __awaiter(this, void 0, void 0, function* () {
            // Make local base consistent with remote
            let mdNames = yield this.mdBase.getNamesList();
            let mdIds = new Set();
            for (let name of mdNames) {
                const _id = this.mdBase.idByName(name);
                if (!_id) {
                    this.createBlockFromFile(name);
                }
                else {
                    if (mdIds.has(_id)) {
                        this.ignoreModifyState = true;
                        yield this.mdBase.delete(this.mdBase.pathByName(name));
                        this.ignoreModifyState = false;
                    }
                    else {
                        mdIds.add(_id);
                    }
                }
            }
            let jsonIds = yield this.jsonBase.getIdsList();
            const remoteBlocks = yield this.ctx.api.getBlocks(jsonIds);
            const remoteBlocksDict = {};
            for (const block of remoteBlocks) {
                remoteBlocksDict[block._id] = block;
            }
            const remoteIds = remoteBlocks.map(block => block._id);
            jsonIds = jsonIds.filter(_id => {
                if (!remoteIds.includes(_id) || !mdIds.has(_id)) {
                    this.jsonBase.delete(_id);
                    return false;
                }
                return true;
            });
            mdIds.forEach((_id) => {
                if (!jsonIds.includes(_id)) {
                    this.mdBase.delete(this.mdBase.pathById(_id));
                    new obsidian.Notice(`Note ${_id} deleted`);
                    return false;
                }
                return true;
            });
            new obsidian.Notice('Base is up to date!');
        });
    }
    getCurrentFileID() {
        const activeFile = this.getCurrentFile();
        return this.mdBase.idByPath(activeFile.path);
    }
    getCurrentFile() {
        return this.ctx.app.workspace.getActiveFile();
    }
    saveCurrentFile() {
        return __awaiter(this, void 0, void 0, function* () {
            // Markdown file have changed -> save it to json format and upload to server
            if (this.ignoreModifyState) {
                return;
            }
            const activeFile = this.ctx.app.workspace.getActiveFile();
            const _id = this.getCurrentFileID();
            const text = yield this.mdBase.readCurrent(activeFile);
            const localBlock = (yield this.jsonBase.read(_id)) || {};
            const block = this.ctx.mdAdapter.toBlock(text, localBlock);
            // @ts-ignore
            try {
                const remoteBlock = yield this.ctx.api.uploadBlock(Object.assign(Object.assign({}, block), { _id: _id }));
                yield this.jsonBase.write(remoteBlock);
            }
            catch (e) {
                if (e.code === HTTP_CODE.GONE) {
                    new obsidian.Notice('This note was deleted in remote');
                    yield this.deleteCurrentFile();
                }
            }
        });
    }
    downloadFile(_id) {
        return __awaiter(this, void 0, void 0, function* () {
            // Update markdown file by data from server, loads if have not locally and update otherwise
            try {
                const block = yield this.ctx.api.downloadBlock(_id);
                yield this.saveBlockLocally(block);
            }
            catch (e) {
                if (e.code === HTTP_CODE.GONE) {
                    new obsidian.Notice('This file was deleted from remote');
                    yield this.mdBase.delete(this.mdBase.pathById(_id));
                }
            }
        });
    }
    createFile(initBlock, path) {
        return __awaiter(this, void 0, void 0, function* () {
            // Creates new file in storage and remote returns it path
            initBlock = Object.assign(Object.assign({}, Base.getDefaultBlock()), initBlock);
            const block = yield this.ctx.api.createBlock(initBlock);
            yield this.saveBlockLocally(block, path);
            return block;
        });
    }
    deleteCurrentFile() {
        return __awaiter(this, void 0, void 0, function* () {
            const path = this.ctx.app.workspace.getActiveFile().path;
            const _id = this.mdBase.idByPath(path);
            this.ignoreModifyState = true;
            yield this.mdBase.delete(path);
            yield this.jsonBase.delete(_id);
            this.ignoreModifyState = false;
            yield this.ctx.api.deleteBlock(_id);
        });
    }
    uploadCurrentFile() {
        return __awaiter(this, void 0, void 0, function* () {
            // File should not be in the base. This method copy file and uploads to remote
            const file = this.getCurrentFile();
            const text = yield this.mdBase.readCurrent(file);
            let parsedBlock = this.ctx.mdAdapter.toBlock(text, {});
            parsedBlock.create = Object.assign(Object.assign({}, parsedBlock.create), { filename: file.basename });
            if (!parsedBlock.title) {
                parsedBlock.title = capitalize(file.basename);
            }
            const block = yield this.createFile(parsedBlock);
            yield this.openFile(block._id);
            yield this.mdBase.delete(file.path);
        });
    }
    openFile(_id) {
        return __awaiter(this, void 0, void 0, function* () {
            const files = this.ctx.app.vault.getMarkdownFiles();
            const file = files.filter(file => this.mdBase.idByPath(file.path) === _id)[0];
            if (file) {
                yield this.ctx.app.workspace.activeLeaf.openFile(file);
            }
        });
    }
    static getDefaultBlock() {
        return {
            title: 'Title'
        };
    }
    checkFileStructure() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.mdBase.checkBaseFolder();
            yield this.jsonBase.checkBaseFolder();
        });
    }
    saveBlockLocally(block, path) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.jsonBase.write(block);
            const text = this.ctx.mdAdapter.toMarkdown(block);
            const targetName = this.mdBase.nameFromBlock(block);
            const targetPath = this.mdBase.pathByName(targetName);
            this.ignoreModifyState = true;
            if (path && !(yield this.ctx.app.vault.adapter.exists(obsidian.normalizePath(targetPath)))) {
                yield this.ctx.app.vault.rename(this.ctx.app.vault.getAbstractFileByPath(path), targetPath);
            }
            yield this.mdBase.write(targetName, text);
            this.ignoreModifyState = false;
        });
    }
    blockByName(name) {
        return {
            title: capitalize(name),
            filename: name
        };
    }
    indexLocalFile(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const name = this.mdBase.nameByPath(path);
            let _id = this.mdBase.idByName(name);
            if (_id) {
                const paths = this.mdBase.pathsById(_id);
                if (paths.length > 1) {
                    const block = yield this.jsonBase.read(_id);
                    this.ignoreModifyState = true;
                    yield this.mdBase.delete(paths.filter(filePath => filePath != path)[0]);
                    this.ignoreModifyState = false;
                    yield this.saveBlockLocally(block, path);
                    return;
                }
                const blocks = yield this.ctx.api.getBlocks([_id]);
                if (blocks.length === 1) {
                    yield this.saveBlockLocally(blocks[0], path);
                    return;
                }
            }
            yield this.createBlockFromFile(name);
        });
    }
}

const DEFAULT_SETTINGS = {
    triggerPhrase: '/',
    backendEntrypoint: 'http://netwik.fivol.space:5050'
};
class Netwik extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.markdownPostProcessor = (el, ctx) => {
            const links = el.findAll('a.internal-link');
            for (let link of links) {
                const linkText = link.getText();
                if (linkText.contains('|')) {
                    continue;
                }
                if (this.ctx.base.mdBase.isControlledPath(`${linkText}.md`)) {
                    const match = linkText.match(/\/\w+\W(.+)/);
                    if (match) {
                        link.setText(match[1]);
                    }
                }
            }
        };
        this.protocolOpenHandler = (params) => {
            if (params.id) {
                const _id = params.id;
                this.ctx.base.downloadFile(_id).then(() => {
                    this.ctx.base.openFile(_id);
                });
            }
        };
        // Only for dev
        this.removeAllChangeHandlers = () => {
            this.app.workspace.iterateCodeMirrors(cm => {
                // @ts-ignore
                cm._handlers.change.map((handler) => {
                    cm.off('change', handler);
                });
            });
        };
        this.editorChangeHandler = (cmEditor, changeObj) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            return (_a = this.autosuggest) === null || _a === void 0 ? void 0 : _a.update(cmEditor, changeObj);
        });
        this.setupChangeHandler = () => {
            this.autosuggest = new BlockSuggest(this.ctx);
            this.registerCodeMirror(cm => {
                cm.on('change', this.editorChangeHandler);
            });
        };
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            const ctx = new Context();
            this.ctx = ctx;
            this.registerMarkdownPostProcessor(this.markdownPostProcessor);
            this.registerObsidianProtocolHandler('netwik', this.protocolOpenHandler);
            yield this.loadSettings();
            ctx.plugin = this;
            ctx.app = this.app;
            ctx.api = new API(this.ctx.settings.backendEntrypoint);
            ctx.mdAdapter = new MarkdownAdapter();
            ctx.base = new Base(this.ctx);
            this.addCommands();
            this.setupChangeHandler();
            this.addSettingTab(new SettingTab(this.app, this));
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.ctx.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.restart();
            yield this.saveData(this.ctx.settings);
        });
    }
    onunload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.registerCodeMirror((cm) => {
                cm.off("change", this.editorChangeHandler);
            });
            this.ctx.base.onunload();
        });
    }
    restart() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.onunload();
            yield this.onload();
        });
    }
    addCommands() {
        this.addCommand({
            id: 'delete-note',
            name: 'Delete remote note',
            callback: () => {
                let leaf = this.app.workspace.activeLeaf;
                const path = leaf.getViewState().state.file;
                if (!this.ctx.base.mdBase.isControlledPath(path)) {
                    new obsidian.Notice(`You can delete only files in "${this.ctx.base.mdBase.basePath}" folder by this command`);
                    return;
                }
                if (leaf.getViewState().type !== 'markdown') {
                    new obsidian.Notice('Can remove only markdown files');
                    return;
                }
                this.ctx.base.deleteCurrentFile();
            }
        });
        this.addCommand({
            id: 'create-note',
            name: 'Create note',
            callback: () => {
                this.ctx.base.createFile({}).then(block => this.ctx.base.openFile(block._id));
            }
        });
        this.addCommand({
            id: 'update-note',
            name: 'Update note',
            callback: () => {
                this.ctx.base.downloadFile(this.ctx.base.getCurrentFileID());
            }
        });
        this.addCommand({
            id: 'sync-base',
            name: 'Sync base',
            callback: () => {
                this.ctx.base.syncBase();
            }
        });
        this.addCommand({
            id: 'copy-url',
            name: 'Copy obsidian url',
            callback: () => {
                const file = this.app.workspace.getActiveFile();
                if (this.ctx.base.mdBase.isControlledPath(file.path)) {
                    const _id = this.ctx.base.mdBase.idByPath(file.path);
                    const url = `obsidian://netwik?id=${_id}`;
                    navigator.clipboard.writeText(url);
                    new obsidian.Notice('URL copied');
                }
            }
        });
        this.addCommand({
            id: 'upload-note',
            name: 'Upload current note',
            callback: () => {
                if (this.ctx.base.mdBase.isControlledPath(this.ctx.base.getCurrentFile().path)) {
                    new obsidian.Notice('Upload command should be used for notes in your local storage, this file already uploaded');
                    return;
                }
                this.ctx.base.uploadCurrentFile();
            }
        });
    }
}
class SettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        new obsidian.Setting(containerEl)
            .setName('Trigger symbol')
            .setDesc('Show suggestions after typing this')
            .addText(text => text
            .setValue(this.plugin.ctx.settings.triggerPhrase)
            .setPlaceholder('"@" by default')
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.ctx.settings.triggerPhrase = value || DEFAULT_SETTINGS.triggerPhrase;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Backend entrypoint')
            .setDesc('API entrypoint address')
            .addTextArea(text => text
            .setValue(this.plugin.ctx.settings.backendEntrypoint)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.ctx.settings.backendEntrypoint = value || DEFAULT_SETTINGS.backendEntrypoint;
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = Netwik;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
