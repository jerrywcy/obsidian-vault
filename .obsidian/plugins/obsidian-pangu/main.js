'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var formatUtil = {
    condenseContent(content) {
        // 将 制表符 改成 四个空格
        content = content.replace(/\t/g, "    ");
        // 删除超过2个的回车
        // Unix 的只有 LF，Windows 的需要 CR LF
        content = content.replace(/(\n){3,}/g, "$1$1");
        content = content.replace(/(\r\n){3,}/g, "$1$1");
        return content;
    },
    getIgnoreBlocks(lines, token = "```") {
        const ignoreBlocks = [];
        let block = null;
        lines.forEach((line, index) => {
            line = line.trim();
            if (line.startsWith(token)) {
                if (!block) {
                    block = { start: index, end: null };
                }
                else {
                    if (line === token) {
                        block.end = index;
                        ignoreBlocks.push(block);
                        block = null;
                    }
                }
            }
        });
        return ignoreBlocks;
    },
    deleteSpaces(content) {
        // 去掉「`()[]{}<>'"`」: 前后多余的空格
        content = content.replace(/\s+([\(\)\[\]\{\}<>'":])\s+/g, " $1 ");
        // 去掉连续括号增加的空格，例如：「` ( [ { <  > } ] ) `」
        content = content.replace(/([<\(\{\[])\s([<\(\{\[])\s/g, "$1$2 ");
        content = content.replace(/([<\(\{\[])\s([<\(\{\[])\s/g, "$1$2 ");
        content = content.replace(/([<\(\{\[])\s([<\(\{\[])\s/g, "$1$2 ");
        content = content.replace(/([<\(\{\[])\s([<\(\{\[])\s/g, "$1$2 ");
        content = content.replace(/\s([>\)\]\}])\s([>\)\]\}])/g, " $1$2");
        content = content.replace(/\s([>\)\]\}])\s([>\)\]\}])/g, " $1$2");
        content = content.replace(/\s([>\)\]\}])\s([>\)\]\}])/g, " $1$2");
        content = content.replace(/\s([>\)\]\}])\s([>\)\]\}])/g, " $1$2");
        // 去掉 「`$ () $`」, 「`$ [] $`」, 「`$ {} $`」 里面增加的空格
        // 去掉开始 $ 后面增加的空格，结束 $ 前面增加的空格
        // 去掉包裹代码的符号里面增加的空格
        // 去掉开始 ` 后面增加的空格，结束 ` 前面增加的空格
        content = content.replace(/([`\$])\s*([<\(\[\{])([^\$]*)\s*([`\$])/g, "$1$2$3$4");
        content = content.replace(/([`\$])\s*([^\$]*)([>\)\]\}])\s*([`\$])/g, "$1$2$3$4");
        // 去掉「`) _`」、「`) ^`」增加的空格
        content = content.replace(/\)\s([_\^])/g, ")$1");
        // 去掉 [^footnote,2002] 中的空格
        content = content.replace(/\[\s*\^([^\]\s]*)\s*\]/g, "[^$1]");
        // 将链接的格式中文括号“[]（）”改成英文括号“[]()”，去掉增加的空格
        content = content.replace(/\s*\[\s*([^\]]+)\s*\]\s*[（(]\s*([^\s\)]*)\s*[)）]\s*/g, " [$1]($2) ");
        // 将图片链接的格式中的多余空格“! []()”去掉，变成“![]()”
        content = content.replace(/!\s*\[\s*([^\]]+)\s*\]\s*[（(]\s*([^\s\)]*)\s*[)）]\s*/g, "![$1]($2) ");
        // 将网络地址中“ : // ”符号改成“://”
        content = content.replace(/\s*:\s*\/\s*\/\s*/g, "://");
        // 去掉行末空格
        content = content.replace(/(\S*)\s*$/g, "$1");
        // 去掉「123 °」和 「15 %」中的空格
        content = content.replace(/([0-9])\s*([°%])/g, "$1$2");
        // 去掉 2020 - 04 - 20, 08 : 00 : 00 这种日期时间表示的数字内的空格
        content = content.replace(/([0-9])\s*-\s*([0-9])/g, "$1-$2");
        content = content.replace(/([0-9])\s*:\s*([0-9])/g, "$1:$2");
        // 去掉 1 , 234 , 567 这种千分位表示的数字内的空格
        content = content.replace(/([0-9])\s*,\s*([0-9])/g, "$1,$2");
        // 全角標點與其他字符之間不加空格
        // 将无序列表的-后面的空格保留
        // 将有序列表的-后面的空格保留
        content = content.replace(/^(?<![-|\d.]\s*)\s*([，。、《》？『』「」；∶【】｛｝—！＠￥％…（）])\s*/g, "$1");
        return content;
    },
    insertSpace(content) {
        // 在 “中文English” 之间加入空格 “中文 English”
        // 在 “中文123” 之间加入空格 “中文 123”
        content = content.replace(/(?<!\[.*\]\(.*)([\u4e00-\u9fa5\u3040-\u30FF])([a-zA-Z0-9`])/g, "$1 $2");
        // 在 “English中文” 之间加入空格 “English 中文”
        // 在 “123中文” 之间加入空格 “123 中文”
        content = content.replace(/(?<!\[.*\]\(.*)([a-zA-Z0-9%`])([*]*[\u4e00-\u9fa5\u3040-\u30FF])/g, "$1 $2");
        // 在 「I said:it's a good news」的冒号与英文之间加入空格 「I said: it's a good news」
        content = content.replace(/([:])\s*([a-zA-z])/g, "$1 $2");
        return content;
    },
    replacePunctuations(content) {
        // `, \ . : ; ? !` 改成 `，、。：；？！`
        // 必须在结尾或者有空格的点才被改成句号
        content = content.replace(/([\u4e00-\u9fa5\u3040-\u30FF])\.($|\s*)/g, "$1。");
        content = content.replace(/([\u4e00-\u9fa5\u3040-\u30FF]),/g, "$1，");
        content = content.replace(/([\u4e00-\u9fa5\u3040-\u30FF]);/g, "$1；");
        content = content.replace(/([\u4e00-\u9fa5\u3040-\u30FF])!/g, "$1！");
        content = content.replace(/([\u4e00-\u9fa5\u3040-\u30FF])\?/g, "$1？");
        content = content.replace(/([\u4e00-\u9fa5\u3040-\u30FF])\\/g, "$1、");
        content = content.replace(/([\u4e00-\u9fa5\u3040-\u30FF])＼s*\:/g, "$1：");
        // 簡體中文使用直角引號
        content = content.replace(/‘/g, "『");
        content = content.replace(/’/g, "』");
        content = content.replace(/“/g, "「");
        content = content.replace(/”/g, "」");
        // 括号使用半角标点
        // 半角括号的两边都有空格就不在这里处理了，放到行中处理
        content = content.replace(/\s*[（(]\s*/g, " ( ");
        content = content.replace(/\s*[）)]\s*/g, " ) ");
        // 英文和数字内部的全角标点 `，。；‘’“”：？！＠＃％＆－＝＋｛｝【】｜＼～`改成半角标点
        content = content.replace(/(\w)\s*，\s*(\w)/g, "$1, $2");
        content = content.replace(/(\w)\s*。\s*(\w)/g, "$1. $2");
        content = content.replace(/(\w)\s*；\s*(\w)/g, "$1; $2");
        content = content.replace(/(\w)\s*‘\s*(\w)/g, "$1 '$2");
        content = content.replace(/(\w)\s*’\s*(\w)/g, "$1' $2");
        content = content.replace(/(\w)\s*“\s*(\w)/g, '$1 "$2');
        content = content.replace(/(\w)\s*”\s*(\w)/g, '$1" $2');
        content = content.replace(/(\w)\s*：\s*(\w)/g, "$1: $2");
        content = content.replace(/(\w)\s*？\s*(\w)/g, "$1? $2");
        content = content.replace(/(\w)\s*！\s*(\w)/g, "$1! $2");
        content = content.replace(/(\w)\s*＠\s*(\w)/g, "$1@$2");
        content = content.replace(/(\w)\s*＃\s*(\w)/g, "$1#$2");
        content = content.replace(/(\w)\s*％\s*(\w)/g, "$1 % $2");
        content = content.replace(/(\w)\s*＆\s*(\w)/g, "$1 & $2");
        content = content.replace(/(\w)\s*－\s*(\w)/g, "$1 - $2");
        content = content.replace(/(\w)\s*＝\s*(\w)/g, "$1 = $2");
        content = content.replace(/(\w)\s*＋\s*(\w)/g, "$1 + $2");
        content = content.replace(/(\w)\s*｛\s*(\w)/g, "$1 {$2");
        content = content.replace(/(\w)\s*｝\s*(\w)/g, "$1} $2");
        content = content.replace(/(\w)\s*[【\[]\s*(\w)/g, "$1 [$2");
        content = content.replace(/(\w)\s*[】\]]\s*(\w)/g, "$1] $2");
        content = content.replace(/(\w)\s*｜\s*(\w)/g, "$1 | $2");
        content = content.replace(/(\w)\s*＼\s*(\w)/g, "$1  $2");
        content = content.replace(/(\w)\s*～\s*(\w)/g, "$1~$2");
        // 连续三个以上的 `。` 改成 `......`
        content = content.replace(/[。]{3,}/g, "……");
        // 截断连续超过一个的 ？和！ 为一个，「！？」也算一个
        content = content.replace(/([！？]+)\1{1,}/g, "$1");
        // 截断连续超过一个的 。，；：、“”『』〖〗《》 为一个
        content = content.replace(/([。，；：、“”『』〖〗《》【】])\1{1,}/g, "$1");
        return content;
    },
    replaceFullNumbersAndChars(content) {
        // 替换全角数字 & 全角英文
        // Ａ -> A
        // ０ -> 0
        return content.replace(/[\uFF10-\uFF19\uFF21-\uFF5A]/g, c => String.fromCharCode(c.charCodeAt(0) - 0xfee0));
    },
    formatContent(content) {
        // 替换所有的全角数字和字母为半角
        content = this.replaceFullNumbersAndChars(content);
        // 删除多余的内容（回车）
        content = this.condenseContent(content);
        // 每行操作
        const lines = content.split("\n");
        const ignoreBlocks = this.getIgnoreBlocks(lines);
        content = lines
            .map((line, index) => {
            // 忽略代码块
            if (ignoreBlocks.some(({ start, end }) => {
                return index >= start && index <= end;
            })) {
                return line;
            }
            // 删除多余的空格
            line = this.deleteSpaces(line);
            // 插入必要的空格
            line = this.insertSpace(line);
            // 将有编号列表的“1. ”改成 “1.  ”
            line = line.replace(/^(\s*)(\d\.)\s+(\S)/, "$1$2  $3");
            // 将无编号列表的“* ”改成 “- ”
            // 将无编号列表的“- ”改成 “- ”
            line = line.replace(/^(\s*)[-\*]\s+(\S)/, "$1- $2");
            return line;
        })
            .join("\n");
        // 结束文档整理前再删除最后一个回车
        content = content.replace(/(\n){2,}$/g, "$1");
        content = content.replace(/(\r\n){2,}$/g, "$1");
        return content;
    },
};

class Pangu extends obsidian.Plugin {
    format(cm) {
        let cursor = cm.getCursor();
        let cursorContent = cm.getRange(Object.assign(Object.assign({}, cursor), { ch: 0 }), cursor);
        const { top } = cm.getScrollInfo();
        cursorContent = formatUtil.formatContent(cursorContent);
        let content = cm.getValue().trim();
        content = content + '\n\n';
        content = formatUtil.formatContent(content);
        cm.setValue(content);
        cm.scrollTo(null, top);
        // 保持光标格式化后不变
        const newDocLine = cm.getLine(cursor.line);
        try {
            cursor = Object.assign(Object.assign({}, cursor), { ch: newDocLine.indexOf(cursorContent) + cursorContent.length });
        }
        catch (error) { }
        cm.setCursor(cursor);
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.addCommand({
                id: 'pangu-format',
                name: '为中英文字符间自动加入空格',
                callback: () => {
                    const activeLeafView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                    if (activeLeafView) {
                        this.format(activeLeafView.sourceMode.cmEditor);
                    }
                },
                hotkeys: [
                    {
                        modifiers: ['Mod', 'Shift'],
                        key: 's',
                    },
                    {
                        modifiers: ['Ctrl', 'Shift'],
                        key: 's',
                    },
                ],
            });
            this.addSettingTab(new PanguSettingTab(this.app, this));
        });
    }
    onunload() {
        console.log('unloading plugin');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
}
class PanguSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Pangu 使用说明' });
        new obsidian.Setting(containerEl).setName('').setDesc('默认快捷键为:Mac - Command + Shift + S，Windows -  Shift + Ctrl + S。当然，您可以到「设置 - 快捷键」里进行更改。');
    }
}

module.exports = Pangu;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
