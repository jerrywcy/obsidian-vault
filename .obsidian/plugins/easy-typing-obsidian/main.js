/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => EasyTypingPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// core.ts
var import_obsidian = __toModule(require("obsidian"));
var InlineType;
(function(InlineType3) {
  InlineType3["text"] = "text";
  InlineType3["code"] = "code";
  InlineType3["formula"] = "formula";
  InlineType3["link"] = "link";
  InlineType3["user"] = "user-defined";
  InlineType3["none"] = "none";
})(InlineType || (InlineType = {}));
var LineType;
(function(LineType2) {
  LineType2["text"] = "text";
  LineType2["code"] = "code";
  LineType2["formula"] = "formula";
  LineType2["frontmatter"] = "frontmatter";
  LineType2["none"] = "none";
})(LineType || (LineType = {}));
var DEFAULT_SETTINGS = {
  AutoFormatting: true,
  FormattingWhenLineEnd: false,
  ChineseEnglishSpace: true,
  ChineseNoSpace: true,
  Capitalization: true,
  PunctuationSpace: true,
  EnglishSpace: true,
  BraceSpace: true,
  NumberSpace: true,
  InlineCodeSpace: true,
  InlineFormulaSpace: true,
  LinkSpace: true,
  LinkSmartSpace: true,
  FullWidthCharacterEnhance: true,
  UserDefinedRegExp: ":\\w*:\n{{.*?}}\n<.*?>\n\\[\\!.*?\\][+-]{0,1}",
  UserDefinedRegSwitch: true,
  UserPartSpace: true,
  Debug: false
};
function splitArticle(article, checkFrontMatter = true, beginIndex = 0) {
  let retArray = [];
  let lines = article.split("\n");
  console.log("line number", lines.length);
  let regNullLine = /^\s*$/;
  let regFormulaBegin = /^\s*(\- (\[[x ]\] )?)?\$\$/;
  let regFormulaEnd = /\$\$$/;
  let regCodeBegin = /^\s*```/;
  let regCodeEnd = /^\s*```$/;
  let index = beginIndex;
  let regAdmonitionBlockBegin = /^\s*```ad-\w+/g;
  if (checkFrontMatter) {
    let frontMatterPart;
    for (let i = 0; i < lines.length; i++) {
      if (regNullLine.test(lines[i])) {
        continue;
      } else if (lines[i] === "---") {
        for (let j = i + 1; j < lines.length; j++) {
          if (lines[j] === "---") {
            if (i != 0) {
              retArray.push({
                type: LineType.text,
                begin: 0,
                end: i
              });
            }
            frontMatterPart = {
              type: LineType.frontmatter,
              begin: i,
              end: j + 1
            };
            retArray.push(frontMatterPart);
            index = j + 1;
            break;
          }
        }
        break;
      } else {
        break;
      }
    }
  }
  while (index < lines.length) {
    if (regCodeBegin.test(lines[index])) {
      let j = index + 1;
      while (j < lines.length) {
        if (regCodeEnd.test(lines[j]))
          break;
        j++;
      }
      if (j === lines.length || !regAdmonitionBlockBegin.test(lines[index])) {
        j = j === lines.length ? j - 1 : j;
        retArray.push({
          type: LineType.code,
          begin: index,
          end: j + 1
        });
      } else {
        retArray.push({
          type: LineType.code,
          begin: index,
          end: index + 1
        });
        retArray.push({
          type: LineType.text,
          begin: index + 1,
          end: j
        });
        retArray.push({
          type: LineType.code,
          begin: j,
          end: j + 1
        });
      }
      index = j + 1;
    } else if (regFormulaBegin.test(lines[index])) {
      let regFormulaOneLine = /(?<!\\)\$\$(?! )[^]*?(?<! )(?<!\\)\$\$/g;
      if (regFormulaOneLine.test(lines[index])) {
        retArray.push({
          type: LineType.formula,
          begin: index,
          end: index + 1
        });
        index += 1;
      } else {
        let j = index + 1;
        while (j < lines.length) {
          if (regFormulaEnd.test(lines[j]))
            break;
          j++;
        }
        j = j === lines.length ? j - 1 : j;
        retArray.push({
          type: LineType.formula,
          begin: index,
          end: j + 1
        });
        index = j + 1;
      }
    } else {
      let j = index + 1;
      for (; j < lines.length; j++) {
        if (regCodeBegin.test(lines[j]) || regFormulaBegin.test(lines[j])) {
          break;
        }
      }
      retArray.push({
        type: LineType.text,
        begin: index,
        end: j
      });
      index = j;
    }
  }
  return retArray;
}
function reparseArticleParts(article, prevArticlePart, updateLineStart, print = false) {
  if (prevArticlePart === null || updateLineStart === 0) {
    return splitArticle(article);
  }
  let lines = article.split("\n");
  let res = [];
  let newBeginIndex = 0;
  let changeArticlePartIndex = 0;
  for (let i = 0; i < prevArticlePart.length; i++) {
    if (updateLineStart >= prevArticlePart[i].begin && updateLineStart < prevArticlePart[i].end) {
      newBeginIndex = prevArticlePart[i].begin;
      changeArticlePartIndex = i;
      break;
    } else {
      res.push(prevArticlePart[i]);
    }
  }
  let regAdmonitionBlockBegin = /```ad-\w+/g;
  if (prevArticlePart[changeArticlePartIndex].type === LineType.text && newBeginIndex != 0 && regAdmonitionBlockBegin.test(lines[newBeginIndex - 1])) {
    changeArticlePartIndex -= 1;
    res.pop();
  } else if (prevArticlePart[changeArticlePartIndex].begin === prevArticlePart[changeArticlePartIndex].end - 1 && changeArticlePartIndex >= 2 && regAdmonitionBlockBegin.test(lines[prevArticlePart[changeArticlePartIndex - 2].end - 1])) {
    changeArticlePartIndex -= 2;
    res.pop();
    res.pop();
  }
  if (changeArticlePartIndex === 0) {
    return splitArticle(article);
  }
  newBeginIndex = prevArticlePart[changeArticlePartIndex].begin;
  let newParts = splitArticle(article, false, newBeginIndex);
  for (let j = 0; j < newParts.length; j++) {
    res.push(newParts[j]);
  }
  if (print)
    new import_obsidian.Notice("Reparse Article: begin line index " + newBeginIndex.toString());
  return res;
}
function getLineTypeFromArticleParts(line, typeArray) {
  for (let i = 0; i < typeArray.length; i++) {
    if (line >= typeArray[i].begin && line < typeArray[i].end) {
      return typeArray[i].type;
    }
  }
}
function stringDeleteAt(str, index) {
  return str.substring(0, index) + str.substring(index + 1);
}
function stringInsertAt(str, index, s) {
  return str.substring(0, index) + s + str.substring(index);
}
function splitLine(line, regExps) {
  let regInlineMark = /(?<!\\)\$|(?<!\\)\`/g;
  let regFormulaInline = /(?<!\\)\$(?! )[^]+?(?<! )(?<!\\)\$/g;
  let regFormulaBlock = /(?<!\\)\$\$(?! )[^]*?(?<! )(?<!\\)\$\$/g;
  let regCode = /(?<!\\)`[^]*?(?<!\\)`/g;
  let markQueue = [];
  let arrayOfInlineTextCodeFormula = [];
  while (true) {
    let match = regInlineMark.exec(line);
    if (!match)
      break;
    markQueue.push(match);
  }
  let textBeginIndex = 0;
  while (markQueue.length != 0) {
    let mark = markQueue.shift();
    if (mark.index < textBeginIndex)
      continue;
    if (mark[0] === "$") {
      let matchFormulaBeginIndex;
      let matchFormulaLastIndex;
      regFormulaBlock.lastIndex = mark.index;
      let matchBlockFormula = regFormulaBlock.exec(line);
      if (matchBlockFormula && matchBlockFormula.index === mark.index) {
        matchFormulaBeginIndex = matchBlockFormula.index;
        matchFormulaLastIndex = regFormulaBlock.lastIndex;
      } else {
        regFormulaInline.lastIndex = mark.index;
        let matchInlineFormula = regFormulaInline.exec(line);
        if (matchInlineFormula && matchInlineFormula.index === mark.index) {
          matchFormulaBeginIndex = matchInlineFormula.index;
          matchFormulaLastIndex = regFormulaInline.lastIndex;
        } else {
          continue;
        }
      }
      if (mark.index > textBeginIndex) {
        arrayOfInlineTextCodeFormula.push({
          content: line.substring(textBeginIndex, mark.index),
          type: InlineType.text,
          begin: textBeginIndex,
          end: mark.index
        });
      }
      arrayOfInlineTextCodeFormula.push({
        content: line.substring(matchFormulaBeginIndex, matchFormulaLastIndex),
        type: InlineType.formula,
        begin: matchFormulaBeginIndex,
        end: matchFormulaLastIndex
      });
      textBeginIndex = matchFormulaLastIndex;
      continue;
    } else if (mark[0] === "`") {
      let matchCodeBeginIndex;
      let matchCodeLastIndex;
      regCode.lastIndex = mark.index;
      let matchInlineCode = regCode.exec(line);
      if (matchInlineCode && matchInlineCode.index === mark.index) {
        matchCodeBeginIndex = matchInlineCode.index;
        matchCodeLastIndex = regCode.lastIndex;
        if (mark.index > textBeginIndex) {
          arrayOfInlineTextCodeFormula.push({
            content: line.substring(textBeginIndex, mark.index),
            type: InlineType.text,
            begin: textBeginIndex,
            end: mark.index
          });
        }
        arrayOfInlineTextCodeFormula.push({
          content: line.substring(matchCodeBeginIndex, matchCodeLastIndex),
          type: InlineType.code,
          begin: matchCodeBeginIndex,
          end: matchCodeLastIndex
        });
        textBeginIndex = matchCodeLastIndex;
        continue;
      } else {
        continue;
      }
    }
  }
  if (textBeginIndex != line.length) {
    arrayOfInlineTextCodeFormula.push({
      content: line.substring(textBeginIndex),
      type: InlineType.text,
      begin: textBeginIndex,
      end: line.length
    });
  }
  let retArray = [];
  for (let i = 0; i < arrayOfInlineTextCodeFormula.length; i++) {
    if (arrayOfInlineTextCodeFormula[i].type != InlineType.text) {
      retArray.push(arrayOfInlineTextCodeFormula[i]);
    } else {
      let tempArray;
      if (regExps)
        tempArray = splitTextWithLinkAndUserDefined(arrayOfInlineTextCodeFormula[i].content, regExps);
      else
        tempArray = splitTextWithLinkAndUserDefined(arrayOfInlineTextCodeFormula[i].content);
      tempArray.forEach((item) => {
        item.begin += arrayOfInlineTextCodeFormula[i].begin;
        item.end += arrayOfInlineTextCodeFormula[i].begin;
        retArray.push(item);
      });
    }
  }
  return retArray;
}
function matchWithReg(text, regExp, type, inlineTypeArray, checkArray = false) {
  let retArray = inlineTypeArray;
  let matchArray = [];
  retArray = retArray.sort((a, b) => a.begin - b.begin);
  while (true) {
    let match = regExp.exec(text);
    if (!match)
      break;
    let valid = true;
    if (checkArray) {
      for (let i = 0; i < retArray.length; i++) {
        if (match.index <= retArray[i].begin) {
          if (regExp.lastIndex <= retArray[i].begin) {
            valid = true;
            break;
          } else if (regExp.lastIndex <= retArray[i].end) {
            valid = false;
            break;
          } else if (regExp.lastIndex > retArray[i].end) {
            let removeCount = 1;
            valid = true;
            for (let j = i + 1; j < retArray.length; j++) {
              if (regExp.lastIndex <= retArray[j].begin) {
                removeCount = j - i;
                valid = true;
                break;
              } else if (regExp.lastIndex < retArray[j].end) {
                valid = false;
                break;
              } else {
                continue;
              }
            }
            if (valid) {
              retArray.splice(i, removeCount);
              i -= 1;
            }
            break;
          }
        }
        if (match.index > retArray[i].begin && match.index < retArray[i].end) {
          valid = false;
          break;
        }
      }
    }
    if (!valid)
      continue;
    matchArray.push({
      content: match[0],
      type,
      begin: match.index,
      end: regExp.lastIndex
    });
  }
  retArray = retArray.concat(matchArray);
  return retArray;
}
function splitTextWithLinkAndUserDefined(text, regExps) {
  let retArray = [];
  let regWikiLink = /\!?\[\[[^\[\]]*?\]\]/g;
  let regMdLink = /\!?\[[^\[\]]*?\]\([^\s\)\(\[\]\{\}']*\)/g;
  let regBareLink = /(https?:\/\/|ftp:\/\/|obsidian:\/\/|zotero:\/\/|www.)[^\s（）《》。，！？；：“”‘’\)\(\[\]\{\}']+/g;
  retArray = matchWithReg(text, regWikiLink, InlineType.link, retArray);
  retArray = matchWithReg(text, regMdLink, InlineType.link, retArray);
  let regExpList = [];
  if (regExps) {
    let regs = regExps.split("\n");
    for (let i = 0; i < regs.length; i++) {
      let regNull = /^\s*$/g;
      if (regNull.test(regs[i]))
        continue;
      let isValidReg = true;
      try {
        let regTemp = new RegExp(regs[i], "g");
      } catch (error) {
        isValidReg = false;
        new import_obsidian.Notice("Bad RegExp:" + regs[i]);
      }
      if (isValidReg) {
        regExpList.push(new RegExp(regs[i], "g"));
      }
    }
    let regLen = regExpList.length;
    for (let i = 0; i < regLen; i++) {
      retArray = matchWithReg(text, regExpList[i], InlineType.user, retArray, true);
    }
  }
  retArray = matchWithReg(text, regBareLink, InlineType.link, retArray, true);
  retArray = retArray.sort((a, b) => a.begin - b.begin);
  let textArray = [];
  let textBegin = 0;
  let textEnd = 0;
  for (let i = 0; i < retArray.length; i++) {
    if (textBegin < retArray[i].begin) {
      textEnd = retArray[i].begin;
      textArray.push({
        content: text.substring(textBegin, textEnd),
        type: InlineType.text,
        begin: textBegin,
        end: textEnd
      });
    }
    textBegin = retArray[i].end;
  }
  if (textBegin != text.length) {
    textArray.push({
      content: text.substring(textBegin, text.length),
      type: InlineType.text,
      begin: textBegin,
      end: text.length
    });
  }
  retArray = retArray.concat(textArray);
  retArray = retArray.sort((a, b) => a.begin - b.begin);
  return retArray;
}
function formatLine(line, curCursor, settings, prevCursor) {
  let ch = curCursor.ch;
  if (line === "")
    return ["", 0, []];
  let lineParts;
  if (settings.UserDefinedRegSwitch) {
    lineParts = splitLine(line, settings.UserDefinedRegExp);
  } else {
    lineParts = splitLine(line);
  }
  let linePartsOrigin = JSON.parse(JSON.stringify(lineParts));
  let inlineChangeList = [];
  let cursorLinePartIndex = -1;
  let cursorRelativeIndex = -1;
  let resultCursorCh = 0;
  for (let i = 0; i < lineParts.length; i++) {
    if (ch > lineParts[i].begin && ch <= lineParts[i].end) {
      cursorLinePartIndex = i;
      cursorRelativeIndex = ch - lineParts[i].begin;
      if (lineParts[i].type === InlineType.text) {
        lineParts[i].content = stringInsertAt(lineParts[i].content, cursorRelativeIndex, "\0");
      }
      break;
    }
  }
  let resultLine = "";
  let offset = 0;
  let prevPartType = InlineType.none;
  let prevTextEndWithSpace = false;
  for (let i = 0; i < lineParts.length; i++) {
    if (i === 0 && lineParts[i].type === InlineType.text && settings.Capitalization) {
      if (prevCursor && cursorLinePartIndex != 0) {
      } else {
        let regFirstSentence = /^\s*(\- (\[[x ]\] )?)?[a-z]/g;
        let regHeaderSentence = /^(#+ |>+ ?)[a-z]/g;
        let textcopy = lineParts[0].content;
        let match = regFirstSentence.exec(textcopy);
        let matchHeader = regHeaderSentence.exec(textcopy);
        let dstCharIndex = -1;
        if (match) {
          dstCharIndex = regFirstSentence.lastIndex - 1;
        } else if (matchHeader) {
          dstCharIndex = regHeaderSentence.lastIndex - 1;
        }
        if (!prevCursor) {
        } else if (prevCursor.line === curCursor.line && dstCharIndex >= prevCursor.ch && dstCharIndex < curCursor.ch) {
        } else {
          dstCharIndex = -1;
        }
        if (dstCharIndex != -1) {
          lineParts[0].content = textcopy.substring(0, dstCharIndex) + textcopy.charAt(dstCharIndex).toUpperCase() + textcopy.substring(dstCharIndex + 1);
        }
      }
    }
    switch (lineParts[i].type) {
      case InlineType.text:
        let content = lineParts[i].content;
        if (settings.Capitalization) {
          var reg = /[\.\?\!。！？]([\s]*)[a-z]/g;
          while (true) {
            let match = reg.exec(content);
            if (!match)
              break;
            let tempIndex = reg.lastIndex - 1;
            if (!prevCursor) {
              lineParts[i].content = content.substring(0, tempIndex) + content.charAt(tempIndex).toUpperCase() + content.substring(reg.lastIndex);
              content = lineParts[i].content;
            } else if (prevCursor && cursorLinePartIndex === i && prevCursor.line === curCursor.line) {
              if (tempIndex >= prevCursor.ch - offset && tempIndex < curCursor.ch - offset) {
                lineParts[i].content = content.substring(0, tempIndex) + content.charAt(tempIndex).toUpperCase() + content.substring(reg.lastIndex);
                content = lineParts[i].content;
              }
            }
          }
        }
        if (settings.ChineseEnglishSpace) {
          let reg1 = /([A-Za-z0-9,\.;\?:!])([\u4e00-\u9fa5]+)/gi;
          let reg22 = /([\u4e00-\u9fa5]+)([A-Za-z0-9])/gi;
          lineParts[i].content = content.replace(reg1, "$1 $2").replace(reg22, "$1 $2");
          content = lineParts[i].content;
        }
        if (settings.ChineseNoSpace) {
          let reg3 = /([\u4e00-\u9fa5，。、；‘’《》]+)(\s+)([\u4e00-\u9fa5，。、；‘’《》]+)/g;
          while (reg3.exec(content)) {
            lineParts[i].content = content.replace(reg3, "$1$3");
            content = lineParts[i].content;
          }
        }
        if (settings.PunctuationSpace) {
          {
            let reg3 = /([,\.;\?\!])([A-Za-z])/gi;
            while (true) {
              let match = reg3.exec(content);
              if (!match)
                break;
              let tempIndex = reg3.lastIndex - 1;
              if (!prevCursor) {
                content = content.substring(0, tempIndex) + " " + content.substring(tempIndex);
              } else if (prevCursor && cursorLinePartIndex === i && prevCursor.line === curCursor.line) {
                if (tempIndex >= prevCursor.ch - offset && tempIndex < curCursor.ch - offset) {
                  content = content.substring(0, tempIndex) + " " + content.substring(tempIndex);
                }
              }
            }
            var reg2 = /(:)([A-Za-z0-9_]+[ ,\.\?\\\/;'"，。？；‘“”’、\[\]\-\{\}])/gi;
            lineParts[i].content = content.replace(reg2, "$1 $2");
            content = lineParts[i].content;
          }
          {
            let reg1 = /(\))([A-Za-z0-9\u4e00-\u9fa5]+)/gi;
            let reg22 = /([A-Za-z0-9\u4e00-\u9fa5:,\.\?\!'"]+)(\()/gi;
            lineParts[i].content = content.replace(reg1, "$1 $2").replace(reg22, "$1 $2");
            content = lineParts[i].content;
          }
          {
            let reg1 = /([,;\?\!\]\}])([0-9])/g;
            let reg22 = /([0-9])([\[\{])/g;
            lineParts[i].content = content.replace(reg1, "$1 $2").replace(reg22, "$1 $2");
            content = lineParts[i].content;
          }
        }
        let regStartWithSpace = /^\0?[\s,\.;\?\!，。；？！、（）\]\)\}]/;
        let regEndWithSpace = /[\s，。、：；？！（）\[\(\{]\0?$/;
        let textStartWithSpace = regStartWithSpace.test(content);
        let textEndWithSpace = regEndWithSpace.test(content);
        switch (prevPartType) {
          case InlineType.none:
            break;
          case InlineType.code:
            if (settings.InlineCodeSpace && !textStartWithSpace) {
              lineParts[i].content = " " + content;
              content = lineParts[i].content;
            }
            break;
          case InlineType.formula:
            if (settings.InlineFormulaSpace && !textStartWithSpace) {
              lineParts[i].content = " " + content;
              content = lineParts[i].content;
            }
            break;
          case InlineType.link:
            if (lineParts[i].content.charAt(0) === " ")
              break;
            let regBareLink = /^(https?:\/\/|ftp:\/\/|obsidian:\/\/|zotero:\/\/|www.)[^\s（）《》。,;:，！？；：“”‘’\)\(\[\]\{\}']+/g;
            let isBareLink = false;
            isBareLink = regBareLink.test(lineParts[i - 1].content);
            if (isBareLink) {
              lineParts[i].content = " " + content;
              content = lineParts[i].content;
              break;
            }
            if (settings.LinkSmartSpace && !textStartWithSpace) {
              let regTestWikiLink = /\!?\[\[[^\[\]]*?\]\]/;
              let regMdLink = /\!?\[[^\[\]]*?\]\([^\s\)\(\[\]\{\}']*\)/g;
              let regNoNeedSpace = /[\u4e00-\u9fa5][\u4e00-\u9fa5]/g;
              let twoNeighborChars = "";
              let charAtTextBegin = lineParts[i].content.charAt(0);
              let charAtLinkEnd = "";
              let linkWithNoText = false;
              if (regTestWikiLink.test(lineParts[i - 1].content)) {
                charAtLinkEnd = lineParts[i - 1].content.charAt(lineParts[i - 1].content.length - 3);
                if (charAtLinkEnd === "[")
                  linkWithNoText = true;
              } else if (regMdLink.test(lineParts[i - 1].content)) {
                let regMdLinkEnd = /\]/;
                let charAtLinkEndIndex = lineParts[i - 1].content.search(regMdLinkEnd) - 1;
                charAtLinkEnd = lineParts[i - 1].content.charAt(charAtLinkEndIndex);
                if (charAtLinkEnd === "[")
                  linkWithNoText = true;
              }
              twoNeighborChars = charAtLinkEnd + charAtTextBegin;
              if (!linkWithNoText && !regNoNeedSpace.test(twoNeighborChars)) {
                lineParts[i].content = " " + content;
                content = lineParts[i].content;
              }
            } else if (!settings.LinkSmartSpace && settings.LinkSpace && !textStartWithSpace) {
              lineParts[i].content = " " + content;
              content = lineParts[i].content;
            }
            break;
          case InlineType.user:
            if (settings.UserPartSpace && !textStartWithSpace) {
              lineParts[i].content = " " + content;
              content = lineParts[i].content;
            }
            break;
        }
        if (i === cursorLinePartIndex) {
          let reg3 = "\0";
          let n = content.search(reg3);
          resultCursorCh = offset + n;
          lineParts[i].content = stringDeleteAt(content, n);
        }
        resultLine += lineParts[i].content;
        offset += lineParts[i].content.length;
        prevPartType = InlineType.text;
        prevTextEndWithSpace = textEndWithSpace;
        break;
      case InlineType.code:
        switch (prevPartType) {
          case InlineType.none:
            break;
          case InlineType.text:
            if (settings.InlineCodeSpace && !prevTextEndWithSpace) {
              lineParts[i - 1].content += " ";
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.code:
            if (settings.InlineCodeSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.formula:
            if (settings.InlineFormulaSpace || settings.InlineCodeSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.link:
            if (settings.LinkSpace || settings.InlineCodeSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.user:
            if (settings.UserPartSpace || settings.InlineCodeSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
        }
        if (i === cursorLinePartIndex) {
          resultCursorCh = offset + cursorRelativeIndex;
        }
        resultLine += lineParts[i].content;
        offset += lineParts[i].content.length;
        prevPartType = InlineType.code;
        prevTextEndWithSpace = false;
        break;
      case InlineType.formula:
        switch (prevPartType) {
          case InlineType.none:
            break;
          case InlineType.text:
            if (settings.InlineFormulaSpace && !prevTextEndWithSpace) {
              lineParts[i - 1].content += " ";
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.code:
            if (settings.InlineCodeSpace || settings.InlineFormulaSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.formula:
            if (settings.InlineFormulaSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.link:
            if (settings.LinkSpace || settings.InlineFormulaSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.user:
            if (settings.UserPartSpace || settings.InlineFormulaSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
        }
        if (i === cursorLinePartIndex) {
          resultCursorCh = offset + cursorRelativeIndex;
        }
        resultLine += lineParts[i].content;
        offset += lineParts[i].content.length;
        prevPartType = InlineType.formula;
        prevTextEndWithSpace = false;
        break;
      case InlineType.link:
        switch (prevPartType) {
          case InlineType.none:
            break;
          case InlineType.text:
            let charAtTextEnd = lineParts[i - 1].content.charAt(lineParts[i - 1].content.length - 1);
            if (charAtTextEnd === " ")
              break;
            if (settings.LinkSmartSpace && !prevTextEndWithSpace) {
              let regTestWikiLink = /\!?\[\[[^\[\]]*?\]\]/;
              let regMdLink = /\!?\[[^\[\]]*?\]\([^\s\)\(\[\]\{\}']*\)/g;
              let regNoNeedSpace = /[\u4e00-\u9fa5][\u4e00-\u9fa5]/g;
              let isBareLink = false;
              let twoNeighborChars = "";
              let charAtLinkBegin = "";
              let linkWithNoText = false;
              if (regTestWikiLink.test(lineParts[i].content)) {
                let beginIndex = 2;
                if (lineParts[i].content.charAt(0) === "!")
                  beginIndex = 3;
                charAtLinkBegin = lineParts[i].content.charAt(beginIndex);
                if (charAtLinkBegin === "]")
                  linkWithNoText = true;
              } else if (regMdLink.test(lineParts[i].content)) {
                let regMdLinkBegin = /\[/;
                let charAtLinkBeginIndex = lineParts[i].content.search(regMdLinkBegin) + 1;
                charAtLinkBegin = lineParts[i].content.charAt(charAtLinkBeginIndex);
                if (charAtLinkBegin === "]")
                  linkWithNoText = true;
              } else {
                isBareLink = true;
              }
              twoNeighborChars = charAtTextEnd + charAtLinkBegin;
              if (!linkWithNoText && (isBareLink || !regNoNeedSpace.test(twoNeighborChars))) {
                lineParts[i - 1].content += " ";
                resultLine += " ";
                offset += 1;
              }
            } else if (settings.LinkSpace && !prevTextEndWithSpace) {
              lineParts[i - 1].content += " ";
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.code:
            if (settings.InlineCodeSpace || settings.LinkSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.formula:
            if (settings.InlineFormulaSpace || settings.LinkSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.link:
            if (settings.LinkSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.user:
            if (settings.UserPartSpace || settings.LinkSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
        }
        if (i === cursorLinePartIndex) {
          resultCursorCh = offset + cursorRelativeIndex;
        }
        resultLine += lineParts[i].content;
        offset += lineParts[i].content.length;
        prevPartType = InlineType.link;
        prevTextEndWithSpace = false;
        break;
      case InlineType.user:
        switch (prevPartType) {
          case InlineType.none:
            break;
          case InlineType.text:
            if (settings.UserPartSpace && !prevTextEndWithSpace) {
              lineParts[i - 1].content += " ";
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.code:
            if (settings.InlineCodeSpace || settings.UserPartSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.formula:
            if (settings.InlineFormulaSpace || settings.UserPartSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.link:
            if (settings.LinkSpace || settings.UserPartSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.user:
            if (settings.UserPartSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
        }
        if (i === cursorLinePartIndex) {
          resultCursorCh = offset + cursorRelativeIndex;
        }
        resultLine += lineParts[i].content;
        offset += lineParts[i].content.length;
        prevPartType = InlineType.user;
        prevTextEndWithSpace = false;
        break;
    }
  }
  for (let i = 0; i < lineParts.length; i++) {
    if (lineParts[i].type === InlineType.text && lineParts[i].content != linePartsOrigin[i].content) {
      inlineChangeList.push({
        text: lineParts[i].content,
        begin: linePartsOrigin[i].begin,
        end: linePartsOrigin[i].end,
        origin: linePartsOrigin[i].content
      });
    }
  }
  inlineChangeList = inlineChangeList.sort((a, b) => a.begin - b.begin);
  return [resultLine, resultCursorCh, inlineChangeList];
}
function isPositionBefore(pos1, pos2) {
  if (pos1.line < pos2.line)
    return true;
  else if (pos1.line > pos2.line)
    return false;
  else {
    if (pos1.ch < pos2.ch)
      return true;
    else
      return false;
  }
}

// main.ts
function setAttributes(element, attributes) {
  for (let key in attributes) {
    element.setAttribute(key, attributes[key]);
  }
}
var EasyTypingPlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.getEditor = () => {
      let editor = null;
      let markdownView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      if (markdownView) {
        editor = markdownView.editor;
      }
      if (editor === null && this.settings.Debug)
        console.log("can't get editor");
      return editor;
    };
    this.formatArticle = () => {
      if (this.settings.Debug) {
        console.log("Begin format Article");
      }
      let editor = this.getEditor();
      if (!editor)
        return;
      this.updateArticleParts(editor);
      let lineCount = editor.lineCount();
      for (let i = 0; i < lineCount; i++) {
        if (this.isTextPart(i)) {
          this.FormatLineWithoutCheckPart(editor, i);
        }
      }
      if (this.settings.Debug) {
        new import_obsidian2.Notice("Format Article Done!");
      }
    };
    this.formatSelection = () => {
      if (this.settings.Debug) {
        console.log("Begin format Selection");
      }
      let editor = this.getEditor();
      if (!editor)
        return;
      this.updateArticleParts(editor);
      if (!editor.somethingSelected() || editor.getSelection() === "") {
        let lineNumber = editor.getCursor().line;
        if (this.isTextPart(lineNumber)) {
          this.FormatLineWithoutCheckPart(editor, lineNumber);
        }
        editor.setCursor({ line: lineNumber, ch: editor.getLine(lineNumber).length });
        return;
      }
      let selection = editor.listSelections()[0];
      let lineBeginReparse = selection.anchor.line;
      if (lineBeginReparse > selection.head.line) {
        lineBeginReparse = selection.head.line;
      }
      this.reparseArticle = { check: true, beginLineNumber: lineBeginReparse };
      let selectedArticle = editor.getSelection();
      let articleParts = splitArticle(selectedArticle);
      let lines = selectedArticle.split("\n");
      let result = "";
      for (let i = 0; i < articleParts.length; i++) {
        if (articleParts[i].type != LineType.text) {
          for (let j = articleParts[i].begin; j < articleParts[i].end; j++) {
            let line = lines[j];
            result += line + "\n";
          }
        } else {
          for (let j = articleParts[i].begin; j < articleParts[i].end; j++) {
            let line = lines[j];
            let newline = formatLine(line, { line: 0, ch: line.length }, this.settings)[0];
            result += newline + "\n";
          }
        }
      }
      result = result.substring(0, result.length - 1);
      editor.replaceSelection(result);
      this.updateArticleParts(editor);
      if (this.settings.Debug) {
        new import_obsidian2.Notice("Format Selection Done!");
        console.log("End format Selection");
      }
    };
    this.handleBeforeInput = (ev) => {
      if (this.settings.Debug)
        console.log("===> Before Input");
      if (!this.settings.FullWidthCharacterEnhance)
        return;
      let editor = this.getEditor();
      if (!editor)
        return;
      let specialChar = new Set(["\u3010", "\u3011", "\xB7", "=", "\u201C", "\u201D", "\u300A", "\u300B", "\u2018", "\u2019", "\uFF08", "\uFF09", "\uFFE5"]);
      if (editor.somethingSelected() && editor.getSelection() != "") {
        if (ev.data.length != 1 || specialChar.has(editor.getSelection()))
          return;
        let selectedFormatRange = editor.listSelections()[0];
        let begin;
        let end;
        let anchor;
        let head;
        if (isPositionBefore(selectedFormatRange.anchor, selectedFormatRange.head)) {
          begin = selectedFormatRange.anchor;
        } else {
          begin = selectedFormatRange.head;
        }
        end = { line: begin.line, ch: begin.ch + 1 };
        anchor = { line: selectedFormatRange.anchor.line, ch: selectedFormatRange.anchor.ch + 1 };
        head = { line: selectedFormatRange.head.line, ch: selectedFormatRange.head.ch + 1 };
        let text;
        switch (ev.data) {
          case "\u3010":
          case "\u3011":
            text = "[" + editor.getSelection() + "]";
            break;
          case "\xB7":
            text = "`" + editor.getSelection() + "`";
            this.reparseArticle.check = true;
            this.reparseArticle.beginLineNumber = begin.line;
            break;
          case "\uFFE5":
          case "\xA5":
            text = "$" + editor.getSelection() + "$";
            this.reparseArticle.check = true;
            this.reparseArticle.beginLineNumber = begin.line;
            break;
          case "\u201C":
          case "\u201D":
            text = "\u201C" + editor.getSelection() + "\u201D";
            break;
          case "\u2018":
          case "\u2019":
            text = "\u2018" + editor.getSelection() + "\u2019";
            break;
          case "\u300A":
          case "\u300B":
            text = "\u300A" + editor.getSelection() + "\u300B";
            break;
          case "\uFF08":
          case "\uFF09":
            console.log("I am here");
            text = "\uFF08" + editor.getSelection() + "\uFF09";
            break;
          default:
            this.prevCursor = begin;
            let regReparse = /^[\-\$\`]|[\-\$\`]\s*$|\n/m;
            let reg = /[-\`\$]/;
            if (regReparse.test(editor.getSelection()) || reg.test(ev.data)) {
              this.reparseArticle.check = true;
              this.reparseArticle.beginLineNumber = begin.line;
            }
            this.selectionTextChange = null;
            return;
        }
        this.selectionTextChange = {
          begin,
          end,
          text,
          selection: true,
          selectionAnchor: anchor,
          selectionHead: head
        };
      }
    };
    this.handleKeydown = (evt) => {
      if (this.settings.Debug) {
        console.log("=========================");
        console.log("keydown:", evt.key);
      }
      let editor = this.getEditor();
      if (!editor)
        return;
      this.keyDownFlag = true;
      if (evt.key === "Control")
        this.ctrlDownLineIndex = editor.getCursor().line;
    };
    this.handleKeyup = (evt) => {
      if (this.settings.Debug) {
        console.log("=========================");
        console.log("keyup:", evt.key);
      }
      let editor = this.getEditor();
      if (!editor)
        return;
      this.keyDownFlag = false;
      if (evt.key === "Process" || evt.key === "Shift") {
        return;
      }
      if (evt.key != "Backspace" && evt.key != "Enter" && evt.key != "Delete") {
        this.updateSelection(editor);
      }
      if (this.selectionTextChange && this.settings.AutoFormatting) {
        editor.replaceRange(this.selectionTextChange.text, this.selectionTextChange.begin, this.selectionTextChange.end);
        editor.setSelection(this.selectionTextChange.selectionAnchor, this.selectionTextChange.selectionHead);
        this.prevCursor = this.selectionTextChange.selectionHead;
        this.selectionTextChange = null;
        this.editorChanged = false;
        return;
      }
      this.selectionTextChange = null;
      if (!this.editorChanged || this.settings.AutoFormatting === false) {
        this.prevCursor = editor.getCursor();
        this.editorChanged = false;
        return;
      }
      if (evt.ctrlKey && (evt.key === "z" || evt.key === "y" || evt.key === "x")) {
        let lineReparseBegin = editor.getCursor().line;
        if (lineReparseBegin > this.ctrlDownLineIndex) {
          lineReparseBegin = this.ctrlDownLineIndex;
        }
        this.reparseArticle = { check: true, beginLineNumber: lineReparseBegin };
        this.updateArticleParts(editor);
        this.prevCursor = editor.getCursor();
        this.editorChanged = false;
        return;
      }
      let regTestReparse = /^[\-\$`]|[\-\$\`]\s*$|\n|\$\$|---|```/gm;
      let cs = editor.getCursor();
      let charAfterCursor = editor.getRange({ line: cs.line, ch: cs.ch }, { line: cs.line, ch: cs.ch + 1 });
      switch (evt.key) {
        case "Backspace":
          if (this.selectedText != "" && !regTestReparse.test(this.selectedText) || this.selectedText === "" && !regTestReparse.test(this.charBeforeCursor)) {
            this.reparseArticle.check = false;
          } else {
            this.reparseArticle = { check: true, beginLineNumber: editor.getCursor().line };
          }
          this.updateSelection(editor);
          this.prevCursor = editor.getCursor();
          this.editorChanged = false;
          this.updateArticleParts(editor);
          return;
        case "Delete":
          if (this.selectedText != "" && !regTestReparse.test(this.selectedText) || this.selectedText === "" && !regTestReparse.test(this.charAfterCursor)) {
            this.reparseArticle.check = false;
          } else {
            this.reparseArticle = { check: true, beginLineNumber: editor.getCursor().line };
          }
          this.updateSelection(editor);
          this.prevCursor = editor.getCursor();
          this.editorChanged = false;
          this.updateArticleParts(editor);
          return;
        case "Enter":
          let prevLineIndex = editor.getCursor().line - 1;
          prevLineIndex = prevLineIndex > 0 ? prevLineIndex : 0;
          if (!evt.ctrlKey)
            this.reparseArticle = { check: true, beginLineNumber: editor.getCursor().line - 1 };
          this.updateArticleParts(editor);
          if (this.isTextPart(prevLineIndex)) {
            if (this.settings.FormattingWhenLineEnd) {
              this.FormatLineWithoutCheckPart(editor, prevLineIndex);
            } else {
              let prevLineEndCursor = { line: prevLineIndex, ch: editor.getLine(prevLineIndex).length };
              this.updateLine(editor, prevLineIndex, prevLineEndCursor, this.settings, prevLineEndCursor, editor.getCursor());
            }
          }
          this.updateSelection(editor);
          this.prevCursor = editor.getCursor();
          this.editorChanged = false;
          return;
        default:
          break;
      }
      let cursor = editor.getCursor();
      {
        let twoCharactersBeforeCursor = editor.getRange({ line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
        let threeCharactersBeforeCursor = editor.getRange({ line: cursor.line, ch: cursor.ch - 3 }, { line: cursor.line, ch: cursor.ch });
        if (twoCharactersBeforeCursor === "$$" || threeCharactersBeforeCursor === "```" || threeCharactersBeforeCursor == "---") {
          this.reparseArticle = { check: true, beginLineNumber: cursor.line };
        }
      }
      if (this.settings.FullWidthCharacterEnhance && !editor.somethingSelected()) {
        let twoCharactersBeforeCursor = editor.getRange({ line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
        let charBeforeCursor = editor.getRange({ line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
        let twoCharactersNearCursor = editor.getRange({ line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch + 1 });
        let character2cursor1 = editor.getRange({ line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch + 1 });
        let twoCharactersAfterCursor = editor.getRange({ line: cursor.line, ch: cursor.ch }, { line: cursor.line, ch: cursor.ch + 2 });
        switch (evt.key) {
          case "$":
          case "\uFFE5":
          case "\xA5":
            if (twoCharactersBeforeCursor === "\uFFE5\uFFE5" || twoCharactersBeforeCursor === "\xA5\xA5") {
              editor.replaceRange("$$", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
              this.reparseArticle = { check: true, beginLineNumber: cursor.line };
            } else if (twoCharactersBeforeCursor === "$$") {
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
              this.reparseArticle = { check: true, beginLineNumber: cursor.line };
            } else if (character2cursor1 === "$\uFFE5$" || character2cursor1 === "$\xA5$") {
              editor.replaceRange("$$", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor(cursor);
              this.reparseArticle = { check: true, beginLineNumber: cursor.line };
            }
            break;
          case "[":
          case "\u3010":
            if (twoCharactersBeforeCursor === "[[" && twoCharactersAfterCursor != "]]" && !editor.somethingSelected()) {
              editor.replaceRange("[[]]", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor(cursor);
            }
            break;
          case "`":
          case "\xB7":
            if (twoCharactersBeforeCursor === "\xB7\xB7") {
              editor.replaceRange("``", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
              this.reparseArticle = { check: true, beginLineNumber: cursor.line };
            } else if (character2cursor1 === "`\xB7`") {
              editor.replaceRange("```\n```", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch + 1 });
              editor.setCursor({ line: cursor.line, ch: cursor.ch + 1 });
              this.reparseArticle = { check: true, beginLineNumber: cursor.line };
            }
            break;
          case "\uFF1A":
          case ":":
          case `;`:
          case `\uFF1B`:
            if (twoCharactersBeforeCursor === "\uFF1B\uFF1B") {
              editor.replaceRange(";", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            } else if (twoCharactersBeforeCursor === "\uFF1A\uFF1A") {
              editor.replaceRange(":", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case `,`:
          case `\uFF0C`:
            if (twoCharactersBeforeCursor === "\uFF0C\uFF0C") {
              editor.replaceRange(",", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case "\u3001":
          case "/":
            if (cursor.ch === 1 && charBeforeCursor === "\u3001") {
              editor.replaceRange("/", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
            } else if (twoCharactersBeforeCursor === "\u3001\u3001") {
              editor.replaceRange("/", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case "\u3002":
          case ".":
            if (twoCharactersBeforeCursor === "\u3002\u3002") {
              editor.replaceRange(".", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case "(":
          case "\uFF08":
            if (charBeforeCursor === "\uFF08" && twoCharactersNearCursor != "\uFF08\uFF09") {
              editor.replaceRange("\uFF08\uFF09", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch });
            } else if (twoCharactersBeforeCursor === "\uFF08\uFF08" && twoCharactersNearCursor === "\uFF08\uFF09") {
              editor.replaceRange("()", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch + 1 });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case "\u300B":
          case ">":
            if (cursor.ch === 1 && charBeforeCursor === "\u300B") {
              editor.replaceRange(">", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
            } else if (twoCharactersBeforeCursor === "\u300B\u300B") {
              editor.replaceRange(">", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            } else if (twoCharactersBeforeCursor === ">\u300B") {
              editor.replaceRange(">", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor(cursor);
            }
            break;
          case "<":
          case "\u300A":
            if (charBeforeCursor === "\u300A" && twoCharactersNearCursor != "\u300A\u300B") {
              editor.replaceRange("\u300A\u300B", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch });
            } else if (twoCharactersBeforeCursor === "\u300A\u300A" && twoCharactersNearCursor === "\u300A\u300B") {
              editor.replaceRange("<", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch + 1 });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case "!":
          case "\uFF01":
            if (twoCharactersBeforeCursor === "\uFF01\uFF01") {
              editor.replaceRange("!", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case "|":
          case "\uFF5C":
            if (twoCharactersBeforeCursor === "\uFF5C\uFF5C") {
              editor.replaceRange("|", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case '"':
            if (charBeforeCursor === "\u201C" && twoCharactersNearCursor != "\u201C\u201D") {
              editor.replaceRange("\u201C\u201D", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch });
            } else if (twoCharactersBeforeCursor === "\u201C\u201D" && twoCharactersNearCursor === "\u201D\u201D") {
              editor.replaceRange('""', { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch + 1 });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case "'":
            if (charBeforeCursor === "\u2018" && twoCharactersNearCursor != "\u2018\u2019") {
              editor.replaceRange("\u2018\u2019", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch });
            } else if (twoCharactersBeforeCursor === "\u2018\u2019" && twoCharactersNearCursor === "\u2019\u2019") {
              editor.replaceRange("''", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch + 1 });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          default:
            break;
        }
      }
      cursor = editor.getCursor();
      this.updateSelection(editor);
      this.updateArticleParts(editor);
      if (getLineTypeFromArticleParts(cursor.line, this.articleParts) != LineType.text) {
        this.prevCursor = editor.getCursor();
        this.editorChanged = false;
        return;
      }
      if (!this.settings.FormattingWhenLineEnd) {
        this.updateLine(editor, cursor.line, cursor, this.settings, this.prevCursor);
      }
      this.prevCursor = editor.getCursor();
      this.editorChanged = false;
    };
    this.isTextPart = (lineIndex) => {
      if (getLineTypeFromArticleParts(lineIndex, this.articleParts) === LineType.text) {
        return true;
      }
      return false;
    };
    this.handleClick = () => {
      if (this.settings.Debug)
        console.log("===>Click event triggered");
      let editor = this.getEditor();
      if (!editor)
        return;
      this.prevCursor = editor.getCursor();
      this.updateSelection(editor);
    };
    this.handleFileOpen = (file) => {
      if (file != null) {
        if (this.settings.Debug)
          console.log("===>File open:", file.vault.getName() + "/" + file.path);
        this.reparseArticle = { check: true, beginLineNumber: 0 };
        this.articleParts = null;
      }
    };
    this.handlePaste = (evt, editor, markdownView) => {
      let cursor = editor.getCursor();
      if (this.settings.Debug) {
        console.log("===>Before-Paste");
      }
      this.reparseArticle = { check: true, beginLineNumber: cursor.line };
      this.updateArticleParts(editor);
    };
    this.handleChange = (editor, markdownView) => {
      if (this.settings.Debug) {
        console.log("===>Change Event");
      }
      this.editorChanged = true;
    };
    this.handleSelectBegin = (ev) => {
      if (this.keyDownFlag)
        return;
      if (this.settings.Debug) {
        console.log("===>Select Event");
      }
      let editor = this.getEditor();
      if (!editor)
        return;
      this.updateSelection(editor);
    };
    this.updateArticleParts = (editor) => {
      if (this.reparseArticle.check || this.articleParts === null) {
        this.articleParts = reparseArticleParts(editor.getValue(), this.articleParts, this.reparseArticle.beginLineNumber, this.settings.Debug);
        this.reparseArticle.check = false;
      }
    };
    this.printArticleParts = (editor) => {
      let article = editor.getValue();
      let lines = article.split("\n");
      console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      for (let i = 0; i < this.articleParts.length; i++) {
        console.log("Article Part:", this.articleParts[i].type, this.articleParts[i].begin, this.articleParts[i].end);
        for (let j = this.articleParts[i].begin; j < this.articleParts[i].end; j++) {
          console.log(lines[j]);
        }
      }
      console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
    };
    this.updateSelection = (editor) => {
      this.selectedText = editor.getSelection();
      this.updateCharAroundCursor(editor);
    };
    this.updateCharAroundCursor = (editor) => {
      if (this.selectedText != "")
        return;
      let cursor = editor.getCursor();
      if (cursor.ch != 0) {
        this.charBeforeCursor = editor.getRange({ line: cursor.line, ch: cursor.ch - 1 }, cursor);
      } else {
        this.charBeforeCursor = cursor.line != 0 ? "\n" : "";
      }
      if (cursor.ch != editor.getLine(cursor.line).length) {
        this.charAfterCursor = editor.getRange(cursor, { line: cursor.line, ch: cursor.ch + 1 });
      } else {
        this.charAfterCursor = cursor.line != editor.lineCount() - 1 ? "\n" : "";
      }
    };
    this.FormatLineWithoutCheckPart = (editor, line) => {
      let lineString = editor.getLine(line);
      let cs = { line, ch: lineString.length };
      let formattedChange = formatLine(lineString, cs, this.settings);
      let changedLine = formattedChange[0];
      if (changedLine != lineString) {
        editor.replaceRange(changedLine, { line, ch: 0 }, cs);
      }
    };
    this.updateLine = (editor, lineIndex, curCursor, settings, prevCursor, setCursor) => {
      let formattedChange = formatLine(editor.getLine(lineIndex), curCursor, this.settings, this.prevCursor);
      let resultLine = formattedChange[0];
      let resultCurosrCh = formattedChange[1];
      let inlineChangeList = formattedChange[2];
      if (inlineChangeList.length != 0) {
        let offset = 0;
        for (let i = 0; i < inlineChangeList.length; i++) {
          let changeBegin = {
            line: lineIndex,
            ch: inlineChangeList[i].begin + offset
          };
          let changeEnd = {
            line: lineIndex,
            ch: inlineChangeList[i].end + offset
          };
          offset += inlineChangeList[i].text.length - inlineChangeList[i].origin.length;
          editor.replaceRange(inlineChangeList[i].text, changeBegin, changeEnd);
        }
        if (!setCursor) {
          editor.setCursor({
            line: lineIndex,
            ch: resultCurosrCh
          });
        } else {
          editor.setCursor(setCursor);
        }
        editor.focus();
      }
    };
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.prevCursor = { line: 0, ch: 0 };
      this.selectionTextChange = null;
      this.editorChanged = false;
      this.keyUpdateCursor = new Set(["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"]);
      this.articleParts = null;
      this.reparseArticle = {
        check: true,
        beginLineNumber: 0
      };
      this.keyDownFlag = false;
      this.selectedText = "";
      this.charBeforeCursor = "";
      this.charAfterCursor = "";
      this.ctrlDownLineIndex = 0;
      this.addCommand({
        id: "easy-typing-format-selection",
        name: "format selected text",
        callback: () => this.formatSelection(),
        hotkeys: [{
          modifiers: ["Ctrl", "Shift"],
          key: "s"
        }]
      });
      this.addCommand({
        id: "easy-typing-format-article",
        name: "format current article",
        callback: () => this.formatArticle(),
        hotkeys: [{
          modifiers: ["Ctrl", "Alt"],
          key: "l"
        }]
      });
      this.addCommand({
        id: "easy-typing-format-switch",
        name: "switch autoformat",
        callback: () => this.switchAutoFormatting(),
        hotkeys: [{
          modifiers: ["Ctrl"],
          key: "tab"
        }]
      });
      this.addSettingTab(new EasyTypingSettingTab(this.app, this));
      this.registerEvent(this.app.workspace.on("editor-change", this.handleChange));
      this.registerEvent(this.app.workspace.on("editor-paste", this.handlePaste));
      this.registerEvent(this.app.workspace.on("file-open", this.handleFileOpen));
      this.registerEvent(this.app.workspace.on("click", this.handleClick));
      this.registerDomEvent(document, "keyup", this.handleKeyup);
      this.registerDomEvent(document, "keydown", this.handleKeydown);
      this.registerDomEvent(document, "beforeinput", this.handleBeforeInput);
      this.registerDomEvent(document, "selectionchange", this.handleSelectBegin);
    });
  }
  onunload() {
  }
  switchAutoFormatting() {
    this.settings.AutoFormatting = this.settings.AutoFormatting ? false : true;
    let status = this.settings.AutoFormatting ? "on" : "off";
    new import_obsidian2.Notice("Autoformat is " + status + "!");
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var EasyTypingSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("a", { text: "More detail is in Github: easy-typing-obsidian", href: "https://github.com/Yaozhuwa/easy-typing-obsidian" });
    containerEl.createEl("h2", { text: "\u603B\u5F00\u5173 (Master Switch)" });
    new import_obsidian2.Setting(containerEl).setName("Auto formatting when typing").setDesc("\u662F\u5426\u5728\u7F16\u8F91\u6587\u6863\u65F6\u81EA\u52A8\u683C\u5F0F\u5316\u6587\u672C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.AutoFormatting).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.AutoFormatting = value;
        console.log("AutoFormatting:", value);
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("LineMode: Only formatting when line end.").setDesc("\u884C\u6A21\u5F0F\uFF1A\u53EA\u5728\u4E00\u884C\u8F93\u5165\u7ED3\u675F\uFF0C\u56DE\u8F66\u521B\u5EFA\u65B0\u884C\u7684\u65F6\u5019\uFF0C\u5BF9\u8BE5\u884C\u8FDB\u884C\u683C\u5F0F\u5316\u3002").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.FormattingWhenLineEnd).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.FormattingWhenLineEnd = value;
        console.log("FormattingWhenLineEnd:", value);
        yield this.plugin.saveSettings();
      }));
    });
    containerEl.createEl("h2", { text: "\u8BE6\u7EC6\u89C4\u5219\u5F00\u5173 (Sub Switches)" });
    new import_obsidian2.Setting(containerEl).setName("Full-Width symbol input enhancement").setDesc("\u5168\u89D2\u7B26\u53F7\u8F93\u5165\u589E\u5F3A").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.FullWidthCharacterEnhance).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.FullWidthCharacterEnhance = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Space between Chinese and English/number").setDesc("\u5728\u4E2D\u6587\u548C\u82F1\u6587/\u6570\u5B57\u95F4\u7A7A\u683C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.ChineseEnglishSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.ChineseEnglishSpace = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Delete the Space between Chinese characters").setDesc("\u5728\u4E2D\u6587\u5B57\u7B26\u95F4\u53BB\u9664\u7A7A\u683C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.ChineseNoSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.ChineseNoSpace = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Smartly insert space between text and punctuation").setDesc("\u5728\u6587\u672C\u548C\u6807\u70B9\u95F4\u667A\u80FD\u7A7A\u683C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.PunctuationSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.PunctuationSpace = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Capitalize the first letter of every sentence").setDesc("\u82F1\u6587\u6BCF\u4E2A\u53E5\u9996\u5B57\u6BCD\u5927\u5199").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.Capitalization).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.Capitalization = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Space between inline code and text").setDesc("\u5728 `\u884C\u5185\u4EE3\u7801` \u548C\u6587\u672C\u95F4\u7A7A\u683C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.InlineCodeSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.InlineCodeSpace = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Space between inline formula and text").setDesc("\u5728 $\u884C\u5185\u516C\u5F0F$ \u548C\u6587\u672C\u95F4\u7A7A\u683C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.InlineFormulaSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.InlineFormulaSpace = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Space between link and text").setDesc("\u5728 [[wikilink]] mdlink \u548C\u6587\u672C\u95F4\u7A7A\u683C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.LinkSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.LinkSpace = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Smart Space between link and text").setDesc("\u5728 [[wikilink]] mdlink \u548C\u6587\u672C\u95F4\u667A\u80FD\u7A7A\u683C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.LinkSmartSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.LinkSmartSpace = value;
        yield this.plugin.saveSettings();
      }));
    });
    containerEl.createEl("h2", { text: "\u81EA\u5B9A\u4E49\u6B63\u5219 (Custom regular expressions)" });
    new import_obsidian2.Setting(containerEl).setName("User Defined RegExp Switch").setDesc("\u81EA\u5B9A\u4E49\u6B63\u5219\u8868\u8FBE\u5F0F\u5F00\u5173\uFF0C\u5339\u914D\u5230\u7684\u5185\u5BB9\u4E0D\u8FDB\u884C\u683C\u5F0F\u5316").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.UserDefinedRegSwitch).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.UserDefinedRegSwitch = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Space between User Defined Part(selected by RegExp) and text").setDesc("\u5728\u7528\u6237\u81EA\u5B9A\u4E49\u533A\u5757(\u6B63\u5219\u8868\u8FBE\u5F0F\u9009\u62E9)\u548C\u6587\u672C\u4E4B\u95F4\u7A7A\u683C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.UserPartSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.UserPartSpace = value;
        yield this.plugin.saveSettings();
      }));
    });
    const regContentAreaSetting = new import_obsidian2.Setting(containerEl);
    regContentAreaSetting.settingEl.setAttribute("style", "display: grid; grid-template-columns: 1fr;");
    regContentAreaSetting.setName("User-defined RegExp to ignore, one expression per line").setDesc("\u7528\u6237\u81EA\u5B9A\u4E49\u6B63\u5219\u8868\u8FBE\u5F0F\uFF0C\u5339\u914D\u5230\u7684\u5185\u5BB9\u4E0D\u8FDB\u884C\u683C\u5F0F\u5316\uFF0C\u6BCF\u884C\u4E00\u4E2A\u8868\u8FBE\u5F0F\uFF0C\u884C\u5C3E\u4E0D\u8981\u968F\u610F\u52A0\u7A7A\u683C");
    const regContentArea = new import_obsidian2.TextAreaComponent(regContentAreaSetting.controlEl);
    setAttributes(regContentArea.inputEl, {
      style: "margin-top: 12px; width: 100%;  height: 30vh;"
    });
    regContentArea.setValue(this.plugin.settings.UserDefinedRegExp).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.UserDefinedRegExp = value;
      this.plugin.saveSettings();
    }));
    containerEl.createEl("a", { text: "RegExp: \u6B63\u5219\u8868\u8FBE\u5F0F", href: "https://javascript.ruanyifeng.com/stdlib/regexp.html#" });
    containerEl.createEl("h2", { text: "Debug" });
    new import_obsidian2.Setting(containerEl).setName("Print debug info in console").setDesc("\u5728\u63A7\u5236\u53F0\u8F93\u51FA\u8C03\u8BD5\u4FE1\u606F").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.Debug).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.Debug = value;
        yield this.plugin.saveSettings();
      }));
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
